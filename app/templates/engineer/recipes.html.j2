{% extends "engineer/base.html.j2" %}
{% block title %}{{ item_type }}Recipe Manager{% endblock %}

{% block content %}
<h1>Recipe Manager</h1>
<button id="createRecipeBtn" class="btn-submit">Create Recipe</button>

<div id="filterModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="filterModal" onclick="closeModal('filterModal')">&times;</span>
        <h2>Filter Recipes</h2>
        <div id="filter-container" hx-get="/engineer/recipes/filter" hx-trigger="load">
            <!-- Filter will be loaded here -->
        </div>
    </div>
</div>

<div class="list-header">
    <button id="filterButton" class="header-button" onclick="openModal('filter')">
        <h2>Recipe List</h2>
    </button>
    <div class="search-container">
        <input id="searchInput" name="search" type="search" placeholder="Search recipes..."
               class="form-control"
               hx-get="/engineer/recipes/list"
               hx-target="#{{ item_type }}-list"
               hx-trigger="keyup changed delay:400ms"
               hx-include="#searchInput, #filterForm"
               hx-swap="innerHTML" />
    </div>
</div>

<div id="{{ item_type }}-list" hx-get="/engineer/recipes/list" hx-trigger="load, Added from:body, Deleted from:body, Edited from:body" hx-include="#searchInput, #filterForm">
    <!-- {{ item_type }} list will be loaded here -->
</div>

{# Include recipe form for create #}
{% with 
    modal_id='recipeModal',
    form_id='recipeForm',
    title='Create Recipe',
    prefix='',
    submit_text='Create Recipe',
    is_edit=false
%}
    {% include "engineer/partials/recipe_form.html.j2" %}
{% endwith %}

{# Include recipe form for edit #}
{% with 
    modal_id='recipeEditModal',
    form_id='recipeEditForm',
    title='Edit Recipe',
    prefix='edit',
    submit_text='Save Changes',
    is_edit=true
%}
    {% include "engineer/partials/recipe_form.html.j2" %}
{% endwith %}

{# Include tool position form for create #}
{% with 
    modal_id='toolPositionModal',
    form_id='toolPositionForm',
    title='Create Tool Position',
    prefix='',
    submit_text='Add'
%}
    {% include "engineer/partials/tool_position_form.html.j2" %}
{% endwith %}

{# Include tool position form for edit #}
{% with 
    modal_id='editToolPositionModal',
    form_id='editToolPositionForm',
    title='Edit Tool Position',
    prefix='edit',
    submit_text='Save'
%}
    {% include "engineer/partials/tool_position_form.html.j2" %}
{% endwith %}

<script src="/static/js/recipe_manager.js"></script>
<script>
    // Initialize recipe managers for create and edit
    const createRecipeManager = new RecipeManager({
        prefix: '',
        isEdit: false,
        recipeModalId: 'recipeModal',
        toolPositionModalId: 'toolPositionModal',
        recipeFormId: 'recipeForm',
        toolPositionFormId: 'toolPositionForm'
    });

    const editRecipeManager = new RecipeManager({
        prefix: 'edit',
        isEdit: true,
        recipeModalId: 'recipeEditModal',
        toolPositionModalId: 'editToolPositionModal',
        recipeFormId: 'recipeEditForm',
        toolPositionFormId: 'editToolPositionForm'
    });

    // Create recipe button handler
    document.getElementById('createRecipeBtn').onclick = () => {
        document.getElementById('recipeModal').classList.add('active');
    };

    // Handle clicking on a recipe in the list (supports copy and edit)
    document.addEventListener('click', async function(e) {
        console.log('list click handler invoked', e.target); // DEBUG

        // Handle "Copy" button first
        const copyBtn = e.target.closest('.copy-button');
        if (copyBtn) {
            console.log('copy-button clicked', copyBtn); // DEBUG
            e.preventDefault();
            e.stopPropagation();
            // Ensure no other listeners run for this event
            if (e.stopImmediatePropagation) e.stopImmediatePropagation();

            // Prevent htmx from handling this interaction if necessary
            const listItem = copyBtn.closest('.list-item');
            const htmx = window.htmx || {};
            if (listItem && htmx && htmx.trigger) {
                try {
                    htmx.trigger(listItem, 'htmx:abort');
                } catch (hxErr) {
                    console.warn('htmx abort failed', hxErr);
                }
            }

            const recipeId = copyBtn.dataset && copyBtn.dataset.id;
            console.log('copy recipeId:', recipeId); // DEBUG
            if (!recipeId) {
                console.error('No recipe id found on copy button');
                return;
            }

            try {
                const response = await fetch(`/engineer/recipes/${recipeId}`);
                console.log('fetch response ok?', response.ok); // DEBUG
                if (response.ok) {
                    const recipeData = await response.json();
                    console.log('recipe data received for copy:', recipeData); // DEBUG
                    if (window.createRecipeManager) {
                        await window.createRecipeManager.populateCreateFormFromRecipe(recipeData);
                        document.getElementById('recipeModal').classList.add('active');
                        console.log('Create modal opened with copied data'); // DEBUG
                    } else {
                        showToast('Create recipe manager not found', 'error');
                        console.error('createRecipeManager not found on window');
                    }
                } else {
                    const text = await response.text().catch(() => 'no body');
                    console.error('Error fetching recipe for copy', response.status, text);
                    showToast('Error loading recipe details', 'error');
                }
            } catch (err) {
                console.error('Error while fetching recipe for copy:', err);
                showToast('An error occurred while loading the recipe', 'error');
            }
            return;
        }

        // Existing handler for clicking a list-item to open edit/info
        const listItem = e.target.closest('.list-item');
        if (listItem && !e.target.closest('.delete-button')) {
            console.log('list-item clicked', listItem); // DEBUG
            // Prevent htmx from handling the click
            const htmx = window.htmx || {};
            if (htmx.trigger) {
                htmx.trigger(listItem, 'htmx:abort');
            }
            
            e.preventDefault();
            e.stopPropagation();
            
            // Extract recipe ID from the format "Recipe-{id}"
            const recipeId = listItem.id.split('-')[1];
            try {
                const response = await fetch(`/engineer/recipes/${recipeId}`);
                if (response.ok) {
                    const recipeData = await response.json();
                    const recipeEditModal = document.getElementById('recipeEditModal');
                    if (recipeEditModal) {
                        editRecipeManager.populateEditForm(recipeData);
                        recipeEditModal.classList.add('active');
                    } else {
                        showToast('Recipe edit modal not found', 'error');
                    }
                } else {
                    showToast('Error loading recipe details', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred while loading the recipe', 'error');
            }
        }
    });
</script>
{% endblock %}
