{% extends "engineer/base.html.j2" %}
{% block title %}{{ item_type }} Management{% endblock %}
{% block content %}
<h1>{{ item_type.replace('_', ' ') }}s</h1>
<button id="createButton" class="btn-submit">Add New {{ item_type.replace('_', ' ') }}</button>

<div id="infoModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="infoModal">&times;</span>
        <div id="infoContainer">
            {% include 'engineer/partials/info_modal.html.j2' with context %}
        </div>
    </div>
</div>

<div id="createModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="createModal">&times;</span>
        <h2>Add New {{ item_type.replace('_', ' ') }}</h2>
        {% include 'engineer/partials/data_entry_modal.html.j2' with context %}
    </div>
</div>

<!-- Add the referred model modal -->
<div id="referredModelModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="referredModelTitle"></h2>
        <form id="referredModelForm" onsubmit="event.preventDefault(); storeReferredModel(this);"></form>
    </div>
</div>

<!-- New Filter/Edit Modal -->
<div id="filterModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="filterModal">&times;</span>
        <h2>Filter {{ item_type }}s</h2>
        <div id="filter-container" hx-get="/engineer/{{ item_type|lower() }}s/filter" hx-trigger="load">
            <!-- Filter will be loaded here -->
        </div>
    </div>
</div>

<div class="list-header">
    <button id="filterButton" class="header-button" onclick="openModal('filter')">
        <h2>{{ item_type.replace('_', ' ') }} List</h2>
    </button>
</div>

<div id="{{ item_type }}-list" hx-get="/engineer/{{ item_type|lower() }}s/list" hx-trigger="load, Added from:body, Deleted from:body, Edited from:body">
    <!-- {{ item_type }} list will be loaded here -->
</div>

<script>
function openRelatedModal(relation) {
    console.log('Opening related modal for:', relation);
    document.getElementById('createRelatedTitle').textContent = `Create New ${relation}`;
    openModal('createRelated');
}

function openReferredModelModal(fieldName, modelName, sourceModalId, existingData) {
    const modal = document.getElementById('referredModelModal');
    const title = document.getElementById('referredModelTitle');
    const form = document.getElementById('referredModelForm');

    console.log('Opening referred model modal', { fieldName, modelName, sourceModalId, existingData });

    title.textContent = existingData ? `Edit ${modelName}` : `Add ${modelName}`;
    form.innerHTML = ''; // Clear previous content

    // Store existing data if we're editing
    if (existingData) {
        localStorage.setItem('editing_' + fieldName, JSON.stringify(existingData));
    } else {
        localStorage.removeItem('editing_' + fieldName);
    }

    // Fetch the form for the referred model
    fetch(`${window.location.pathname}${fieldName.toLowerCase()}/referred_form`)
        .then(response => response.text())
        .then(html => {
            form.innerHTML = html;
            form.setAttribute('data-field-name', fieldName);
            form.setAttribute('data-source-modal', sourceModalId);
            
            // If we have existing data, populate the form
            if (existingData) {
                Object.entries(existingData).forEach(([key, value]) => {
                    const input = form.querySelector(`[name="${key}"]`);
                    if (input) {
                        if (input.type === 'checkbox') {
                            input.checked = value;
                        } else if (input.tagName === 'SELECT') {
                            // For select elements, we need to find the option with matching value
                            const option = Array.from(input.options).find(opt => 
                                opt.value === (value?.id?.toString() || value?.toString())
                            );
                            if (option) {
                                option.selected = true;
                            }
                        } else {
                            // Handle enum values that might be objects
                            if (value && typeof value === 'object' && value.value !== undefined) {
                                input.value = value.value;
                            } else {
                                input.value = value;
                            }
                        }
                    }
                });
            }

            if (modal) {
                modal.classList.add('active');
            }
        });
}

// Consolidated Event Listener for Close Buttons and Outside Clicks
document.addEventListener('click', function(event) {
    // Close buttons
    if (event.target.classList.contains('close')) {
        const modalId = event.target.dataset.modal || event.target.closest('.modal').id; // Get modalId
        closeModal(modalId);
        event.stopPropagation(); // Prevent closing modal immediately after opening due to outside click handler

        if (modalId === "createModal" && document.getElementById('referredModelModal')) { // Reset ReferredModelModal form if there is any related model field in the main modal
            document.getElementById('referredModelForm').reset();
        }

    }

    // Outside click (Only if modal is active)
    const activeModals = document.querySelectorAll('.modal.active'); // Select *active* modals only
    activeModals.forEach(modal => {
        if (event.target === modal) {
            closeModal(modal.id);
        }
    });
});

function storeReferredModel(form) {
    const formData = new FormData(form);
    const modelData = Object.fromEntries(formData.entries());
    const fieldName = form.getAttribute('data-field-name');
    const sourceModalId = form.getAttribute('data-source-modal');
    console.log('Storing referred model data for field:', fieldName, 'Data:', modelData, 'Source Modal:', sourceModalId);
    
    // Check if we're editing an existing item
    const existingData = localStorage.getItem('editing_' + fieldName);
    if (existingData) {
        // We're editing - update the existing item in the form
        const existingItem = JSON.parse(existingData);
        updateExistingItemInForm(fieldName, existingItem.id, modelData, sourceModalId);
        localStorage.removeItem('editing_' + fieldName);
    } else {
        // We're adding a new item
        let storedModels = JSON.parse(localStorage.getItem(`${fieldName}_models`) || '[]');
        storedModels.push(modelData);
        localStorage.setItem(`${fieldName}_models`, JSON.stringify(storedModels));
        addReferredModelToMainForm(fieldName, modelData, sourceModalId);
    }
    
    // Close the referred model modal
    const ref_modal_id = document.getElementById('referredModelModal').id;
    closeModal(ref_modal_id);
    
    // Clear the form
    form.reset();
}

function updateExistingItemInForm(fieldName, itemId, newData, sourceModalId) {
    const sourceModal = document.getElementById(sourceModalId);
    if (!sourceModal) {
        console.error(`Source modal ${sourceModalId} not found`);
        return;
    }

    const container = sourceModal.querySelector(`#${fieldName}-container`);
    if (!container) {
        console.error(`Container for ${fieldName} not found in ${sourceModalId}`);
        return;
    }

    // Find the existing item's input group
    const existingInputGroup = Array.from(container.querySelectorAll('.input-group')).find(group => {
        const hiddenInput = group.querySelector(`input[name="${fieldName}[]"]`);
        return hiddenInput && hiddenInput.value === itemId;
    });

    if (existingInputGroup) {
        // Update the display of the existing item
        const childDetails = existingInputGroup.querySelector('.child-details');
        if (childDetails) {
            // Update name if it exists
            if (newData.name) {
                const nameField = childDetails.querySelector('.field-value.name');
                if (nameField) {
                    nameField.textContent = newData.name;
                }
            }

            // Update other fields
            Object.entries(newData).forEach(([key, value]) => {
                if (key !== 'id' && key !== 'name') {
                    const fieldElement = childDetails.querySelector(`[data-field="${key}"] .field-value`);
                    if (fieldElement) {
                        fieldElement.textContent = value;
                    }
                }
            });
        }
    }
}

function addReferredModelToMainForm(fieldName, modelData, sourceModalId) {
    const sourceModal = document.getElementById(sourceModalId);
    if (!sourceModal) {
        console.error(`Source modal ${sourceModalId} not found`);
        return;
    }

    const container = sourceModal.querySelector(`#${fieldName}-container`);
    if (!container) {
        console.error(`Container for ${fieldName} not found in ${sourceModalId}`);
        return;
    }
    
    const div = document.createElement('div');
    div.className = 'input-group mb-2';
    div.innerHTML = `
        <input type="text" class="form-control" value="${modelData.name || 'New item'}" readonly>
        <input type="hidden" name="${fieldName}[]" value="${modelData.id || ''}">
        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
    `;
    container.appendChild(div);
    
    console.log('Added new item to container in', sourceModalId, ':', container);
}
</script>
{% endblock %}
