{% extends "engineer/base.html.j2" %}
{% block title %}{{ item_type }} Management{% endblock %}
{% block content %}
<h1>{{ item_type.replace('_', ' ') }}s</h1>
<button id="createButton" class="btn-submit">Add New {{ item_type.replace('_', ' ') }}</button>

<div id="infoModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="infoModal">&times;</span>
        <div id="infoContainer">
            {% include 'engineer/partials/info_modal.html.j2' with context %}
        </div>
    </div>
</div>

<div id="createModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="createModal">&times;</span>
        <h2>Add New {{ item_type.replace('_', ' ') }}</h2>
        {% include 'engineer/partials/data_entry_modal.html.j2' with context %}
    </div>
</div>

<!-- Add the referred model modal -->
<div id="referredModelModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="referredModelTitle"></h2>
        <form id="referredModelForm" onsubmit="event.preventDefault(); storeReferredModel(this);"></form>
    </div>
</div>

<!-- New Filter/Edit Modal -->
<div id="filterModal" class="modal">
    <div class="modal-content">
        <span class="close" data-modal="filterModal">&times;</span>
        <h2>Filter {{ item_type }}s</h2>
        <div id="filter-container" hx-get="/engineer/{{ item_type|lower() }}s/filter" hx-trigger="load">
            <!-- Filter will be loaded here -->
        </div>
    </div>
</div>

<div class="list-header">
    <button id="filterButton" class="header-button" onclick="openModal('filter')">
        <h2>{{ item_type.replace('_', ' ') }} List</h2>
    </button>
</div>

<div id="{{ item_type }}-list" hx-get="/engineer/{{ item_type|lower() }}s/list" hx-trigger="load, Added from:body, Deleted from:body, Edited from:body">
    <!-- {{ item_type }} list will be loaded here -->
</div>

<script>
function openModal(type) {
    console.log(type)
    const modalId = `${type}Modal`;
    console.log('Opening modal:', modalId);
    // document.getElementById(modalId).style.display = "flex";
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
    }
}

function closeModal(modalId) { // Takes modalId directly
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        // Reset forms when closing if needed
        const form = modal.querySelector('form'); 
        if (form) {
            form.reset();
        }
    }
}

function openRelatedModal(relation) {
    console.log('Opening related modal for:', relation);
    document.getElementById('createRelatedTitle').textContent = `Create New ${relation}`;
    openModal('createRelated');
}

function openReferredModelModal(fieldName, modelName, sourceModalId) {
    const modal = document.getElementById('referredModelModal');
    const title = document.getElementById('referredModelTitle');
    const form = document.getElementById('referredModelForm');

    console.log('referrererefed modal')

    title.textContent = `Add ${modelName}`;
    form.innerHTML = ''; // Clear previous content

    // Fetch the form for the referred model
    fetch(`${window.location.pathname}${fieldName.toLowerCase()}/referred_form`)
        .then(response => response.text())
        .then(html => {
            form.innerHTML = html;
            form.setAttribute('data-field-name', fieldName);
            form.setAttribute('data-source-modal', sourceModalId);
            if (modal) {
                modal.classList.add('active');
            }
        });
}

// Consolidated Event Listener for Close Buttons and Outside Clicks
document.addEventListener('click', function(event) {
    // Close buttons
    if (event.target.classList.contains('close')) {
        const modalId = event.target.dataset.modal || event.target.closest('.modal').id; // Get modalId
        closeModal(modalId);
        event.stopPropagation(); // Prevent closing modal immediately after opening due to outside click handler

        if (modalId === "createModal" && document.getElementById('referredModelModal')) { // Reset ReferredModelModal form if there is any related model field in the main modal
            document.getElementById('referredModelForm').reset();
        }

    }

    // Outside click (Only if modal is active)
    const activeModals = document.querySelectorAll('.modal.active'); // Select *active* modals only
    activeModals.forEach(modal => {
        if (event.target === modal) {
            closeModal(modal.id);
        }
    });
});

function storeReferredModel(form) {
    const formData = new FormData(form);
    const modelData = Object.fromEntries(formData.entries());
    const fieldName = form.getAttribute('data-field-name');
    const sourceModalId = form.getAttribute('data-source-modal');
    console.log('Storing referred model data for field:', fieldName, 'Data:', modelData, 'Source Modal:', sourceModalId);
    
    // Get the current stored models or initialize an empty array
    let storedModels = JSON.parse(localStorage.getItem(`${fieldName}_models`) || '[]');
    
    // Add the new model data
    storedModels.push(modelData);
    
    // Store the updated array back in localStorage
    localStorage.setItem(`${fieldName}_models`, JSON.stringify(storedModels));

    // Update the main form to show the new item
    addReferredModelToMainForm(fieldName, modelData, sourceModalId);
    
    // Close the referred model modal
    const ref_modal_id = document.getElementById('referredModelModal').id
    closeModal(ref_modal_id)
    
    // Clear the form
    form.reset();
}

function addReferredModelToMainForm(fieldName, modelData, sourceModalId) {
    const sourceModal = document.getElementById(sourceModalId);
    if (!sourceModal) {
        console.error(`Source modal ${sourceModalId} not found`);
        return;
    }

    const container = sourceModal.querySelector(`#${fieldName}-container`);
    if (!container) {
        console.error(`Container for ${fieldName} not found in ${sourceModalId}`);
        return;
    }
    
    const div = document.createElement('div');
    div.className = 'input-group mb-2';
    div.innerHTML = `
        <input type="text" class="form-control" value="${modelData.name || 'New item'}" readonly>
        <input type="hidden" name="${fieldName}[]" value="${modelData.id || ''}">
        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
    `;
    container.appendChild(div);
    
    console.log('Added new item to container in', sourceModalId, ':', container);
}
</script>

{% endblock %}
