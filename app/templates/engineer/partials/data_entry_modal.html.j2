<style>
.child-details {
    display: flex;
    flex-direction: row;
    gap: 16px;
    padding: 8px;
    align-items: center;
    flex-wrap: wrap;
    flex: 1;
    min-width: 0;
}

.child-field {
    display: inline-flex;
    gap: 4px;
    align-items: baseline;
}

.field-label {
    font-size: 0.9em;
    color: #666;
}

.field-value {
    color: #bdbdbd;
}

.field-value.name {
    font-weight: 600;
    color: #f3f3f3;
    margin-right: 8px;
}
</style>

<form id="{{ form_id }}" 
      {% if item %}
      hx-put="{{ form_action }}/{{ item.id }}/"
      {% else %}
      hx-post="{{ form_action }}/"
      {% endif %}
      hx-swap="none"
      {% if item %}data-machine-id="{{ item.id }}"{% endif %}
    >
    {% for field_name, field in model.model_fields.items() %}
        {% if field_name != "id" %}
            <div class="form-group">
                {% set field_str = field|string %}
                {% set is_required = 'required=True' in field_str %}
                <label for="{{ field_name }}">{{ field_name.capitalize()|replace('_id', ' ')|replace('_', ' ') }}{% if is_required %} * {% endif %}:</label>
                {% if field_name in enum_fields %}
                    <select id="{{ field_name }}" 
                            name="{{ field_name }}" 
                            {% if is_required %}required{% endif %}>
                        {% for enum_value in enum_fields[field_name] %}
                            <option value="{{ enum_value.value }}" {% if item and item[field_name] == enum_value %}selected{% endif %}>
                                {{ enum_value.name|replace('_', ' ')|title }}
                            </option>
                        {% endfor %}
                    </select>
                {% elif field_name.endswith('_id') and field_name[:-3] in relationship_options %}
                    <select id="{{ field_name }}" 
                            name="{{ field_name }}" 
                            {% if is_required %}required{% endif %}>
                        {% for option in relationship_options[field_name[:-3]] %}
                            <option value="{{ option.id }}" 
                                    {% if item and item[field_name] == option.id %}selected{% endif %}>
                                {% if option.name is defined %}{{ option.name }}{% endif %}{% for field, value in option.items() %}{% if field not in ['id', 'name'] %}  ({{ field|replace('_', ' ')|title }}: {% if value.__class__.__class__.__name__ == 'EnumMeta' %}{{ value.name|replace('_', ' ')|title }}{% elif value is string and value.startswith('<') and value.endswith('>') %}{{ value.split('.')[1].split(':')[0]|replace('_', ' ')|title }}{% else %}{{ value }}{% endif %}){% endif %}{% endfor %}
                            </option>
                        {% endfor %}
                    </select>
                {% elif field_name in children %}
                    <div class="mb-3">
                        <div id="{{ field_name }}-container" class="mb-2">
                            {% for child in children[field_name]['instances'] %}
                                <div class="input-group mb-2 bg-slate-900/30 rounded-md">
                                    <div class="form-control child-details">
                                        {% if child.name is defined %}
                                            <div class="child-field">
                                                <span class="field-value name">{{ child.name }}</span>
                                            </div>
                                        {% endif %}
                                        {% for field, value in child.items() %}
                                            {% if field not in ['id', 'name'] %}
                                                <div class="child-field">
                                                    <span class="field-label">{{ field|replace('_', ' ')|title }}:</span>
                                                    <span class="field-value">
                                                        {% if value.__class__.__class__.__name__ == 'EnumType' %}
                                                            {{ value.name|replace('_', ' ')|title }}
                                                        {% elif value is string and value.startswith('<') and value.endswith('>') %}
                                                            {{ value.split('.')[1].split(':')[0]|replace('_', ' ')|title }}
                                                        {% else %}
                                                            {{ value }}
                                                        {% endif %}
                                                    </span>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>
                                    <input type="hidden" name="{{ field_name }}[]" value="{{ child['id'] }}">
                                    <div class="btn-group">
                                        <button type="button"
                                            class="btn-list-action btn-edit"
                                            onclick="openReferredModelModal('{{ field_name }}', '{{ field_name.capitalize()|replace('_id', ' ')|replace('_', ' ') }}', '{{ 'createModal' if not item else 'infoModal' }}', {{ child|get_fked }})">âœŽ</button>
                                        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">ðŸ—‘</button>
                                    </div>
                                </div>
                            {% endfor %}                        
                        </div>
                        <button type="button" 
                        class="btn-add-new" 
                        onclick="openReferredModelModal('{{ field_name }}', '{{ field_name.capitalize()|replace('_id', ' ')|replace('_', ' ') }}', '{{ 'createModal' if not item else 'infoModal' }}', null)">Add {{ children[field_name].name }}</button>
                    </div>
                {% elif field.annotation | field_types == 'select' %}
                    <div class="mb-3">
                        <div id="{{ item.id if item else '' }}-{{ field_name }}-container-Gay2" class="mb-2">
                            {% if item and item[field_name] %}
                                {% for value in item[field_name] %}
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" name="{{ field_name }}[]" value="{% if value.__class__.__class__.__name__ == 'EnumMeta' %}{{ value.name|replace('_', ' ')|title }}{% elif value is string and value.startswith('<') and value.endswith('>') %}{{ value.split('.')[1].split(':')[0]|replace('_', ' ')|title }}{% else %}{{ value }}{% endif %}">
                                        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
                                    </div>
                                {% endfor %}
                            {% else %}
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" name="{{ field_name }}[]">
                                    <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
                                </div>
                            {% endif %}
                        </div>
                        <button type="button" class="btn-add-field" onclick="addListField('{{ item.id if item else '' }}-{{ field_name }}-container-Gay3', '{{ field_name }}')">Add {{ field_name.capitalize()|replace('_', ' ') }}</button>
                    </div>
                {% else %}
                    {% if field.annotation | field_types == 'checkbox' %}
                    <input type="hidden" name="{{ field_name }}" value="false">
                    {% endif %}
                    <input type="{{ field.annotation | field_types }}"
                        id="{{ field_name }}" 
                        name="{{ field_name }}" 
                        {% if is_required %}required{% endif %}
                        {% if field.annotation | field_types == 'date' %}
                        value="{{ item[field_name].strftime('%Y-%m-%d') if item and item[field_name] else '' }}"
                        {% elif field.annotation | field_types == 'checkbox' %}
                        {% if item and item[field_name] %}checked{% endif %}
                        {% else %}
                        value="{% if item and item[field_name].__class__.__class__.__name__ == 'EnumMeta' %}{{ item[field_name].name|replace('_', ' ')|title }}{% elif item and item[field_name] is string and item[field_name].startswith('<') and item[field_name].endswith('>') %}{{ item[field_name].split('.')[1].split(':')[0]|replace('_', ' ')|title }}{% else %}{{ item[field_name] if item else '' }}{% endif %}"
                        {% endif %}>
                {% endif %}
            </div>
        {% endif %}
    {% endfor %}
    {% if item %}
    <input type="hidden" name="id" value="{{ item.id }}">
    {% endif %}
    <button type="submit" class="btn-submit" onclick="event.preventDefault(); submitMainForm(this.form);">{{ submit_text if submit_text else 'Add' }}</button>
</form>

{% block content %}
{% endblock %}

<script>
// Function to add a list field input
function addListField(containerId, fieldName) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container with id "${containerId}" not found`);
        return;
    }
    
    const inputGroup = document.createElement('div');
    inputGroup.className = 'input-group mb-2';
    
    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'form-control';
    input.name = `${fieldName}[]`;
    
    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.className = 'btn-list-action btn-remove';
    removeButton.textContent = 'x';
    removeButton.onclick = function() { removeListField(this); };
    
    inputGroup.appendChild(input);
    inputGroup.appendChild(removeButton);
    
    container.appendChild(inputGroup);
    console.log(`New input field added to ${containerId}`);
}

// Function to remove a list field input
function removeListField(button) {
    const inputGroup = button.closest('.input-group');
    if (inputGroup) {
        inputGroup.remove();
        console.log('Input field removed');
    } else {
        console.error('Could not find parent input group to remove');
    }
}

function submitMainForm(form) {
    console.log("entering submitMainForm")
    const formData = new FormData(form);
    // Add stored referred models to the form data
    console.log('step 1')
    {% for field_name in children %}
        console.log('checking local storage for: ', '{{ field_name }}_models')
        if ('{{ field_name }}_models' in localStorage) {
            console.log(`found some_models in storage`)
            const storedModels = JSON.parse(localStorage.getItem('{{ field_name }}_models') || '[]');
            formData.append('{{ field_name }}_new', JSON.stringify(storedModels));
            console.log(`added ${storedModels} to form`)
        }
    {% endfor %}
    console.log('step 2')
    
    fetch(form.getAttribute('hx-post') || form.getAttribute('hx-put'), {
        method: form.getAttribute('hx-post') ? 'POST' : 'PUT',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
         if (data.message) {
            // Clear stored models after successful submission
            {% for field_name in children %}
                console.log('removing local storage for: ', '{{ field_name }}_models')
                localStorage.removeItem('{{ field_name }}_models');
            {% endfor %}
            
            // Clear form fields (Improved)
            form.reset();
            form.querySelectorAll('input[type="text"], input[type="date"], input[type="number"], textarea').forEach(input => {
                input.value = '';
            });
            // Clear any custom select elements or other fields not cleared by form.reset()
            form.querySelectorAll('select').forEach(select => {
                select.selectedIndex = 0;
            });
            form.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
                input.checked = false;
            });

            // Clear dynamically added list fields (Existing Code - Keep this)
            const listContainers = form.querySelectorAll('[id$="-container"]');
            listContainers.forEach(container => {
                const inputs = container.querySelectorAll('.input-group');
                inputs.forEach((input, index) => {
                    if (index > 0) { // Keep the first input, remove others
                        input.remove();
                    } else { // Clear the value of the first input
                        const field = input.querySelector('input, select');
                        if (field) {
                            field.value = ''; // or field.value = field.defaultValue; to reset to defaults
                        }
                    }
                });
            });

            showToast(data.message);
            // Close the modal
            const modalId = form.closest('.modal').id;
            closeModal(modalId);

            // Trigger a custom event to refresh the list
            document.body.dispatchEvent(new Event('Added'));
        } else {
            showToast(data.detail, 'error');
        }
    })
    .catch(error => {
        showToast(error, 'error');
    });
}
</script>
