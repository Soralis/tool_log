<form id="{{ form_id }}" 
      {% if item %}
      hx-put="{{ form_action }}/{{ item.id }}"
      {% else %}
      hx-post="{{ form_action }}"
      {% endif %}
      hx-swap="none"
      {% if item %}data-machine-id="{{ item.id }}"{% endif %}
      onsubmit="event.preventDefault(); submitMainForm(this);">
    {% for field_name, field in model.model_fields.items() %}
        {% if field_name != "id" %}
            <div class="form-group">
                {% set field_str = field|string %}
                {% set is_required = 'required=True' in field_str %}
                <label for="{{ field_name }}">{{ field_name.capitalize()|replace('_id', ' ')|replace('_', ' ') }}{% if is_required %} * {% endif %}:</label>
                {% if field_name in enum_fields %}
                    <select id="{{ field_name }}" 
                            name="{{ field_name }}" 
                            {% if is_required %}required{% endif %}>
                        {% for enum_value in enum_fields[field_name] %}
                            <option value="{{ enum_value.value }}" {% if item and item[field_name] == enum_value %}selected{% endif %}>
                                {{ enum_value.value }}
                            </option>
                        {% endfor %}
                    </select>
                {% elif field_name.endswith('_id') and field_name[:-3] in relationship_options %}
                    <select id="{{ field_name }}" 
                            name="{{ field_name }}" 
                            {% if is_required %}required{% endif %}>
                        {% for option in relationship_options[field_name[:-3]] %}
                            <option value="{{ option.id }}" 
                                    {% if item and item[field_name] == option.id %}selected{% endif %}>
                                {{ option.name }}
                            </option>
                        {% endfor %}
                    </select>
                {% elif field_name in list_relationships %}
                    <div class="mb-3">
                        <div id="{{ field_name }}-container" class="mb-2">
                            {% if item and item[field_name] %}
                                {% for related_item in item[field_name] %}
                                    <div class="input-group mb-2">
                                        <select class="form-control" name="{{ field_name }}[]">
                                            {% for option in relationship_options[field_name] %}
                                                <option value="{{ option.id }}" {% if related_item.id == option.id %}selected{% endif %}>
                                                    {{ option.name }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                        {% if field_name in referred_models %}
                            <button type="button" class="btn-add-new" onclick="openReferredModelModal('{{ field_name }}', '{{ referred_models[field_name].name }}', '{{ 'createModal' if not item else 'infoModal' }}')">Add {{ referred_models[field_name].name }}</button>
                        {% endif %}
                    </div>
                {% elif field.annotation | field_types == 'select' %}
                    <div class="mb-3">
                        <div id="{{ item.id if item else '' }}-{{ field_name }}-container-Gay2" class="mb-2">
                            {% if item and item[field_name] %}
                                {% for value in item[field_name] %}
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" name="{{ field_name }}[]" value="{{ value }}">
                                        <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
                                    </div>
                                {% endfor %}
                            {% else %}
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" name="{{ field_name }}[]">
                                    <button type="button" class="btn-list-action btn-remove" onclick="removeListField(this)">x</button>
                                </div>
                            {% endif %}
                        </div>
                        <button type="button" class="btn-add-field" onclick="addListField('{{ item.id if item else '' }}-{{ field_name }}-container-Gay3', '{{ field_name }}')">Add {{ field_name.capitalize()|replace('_', ' ') }}</button>
                    </div>
                {% else %}
                    {% if field.annotation | field_types == 'checkbox' %}
                    <input type="hidden" name="{{ field_name }}" value="false">
                    {% endif %}
                    <input type="{{ field.annotation | field_types }}"
                        id="{{ field_name }}" 
                        name="{{ field_name }}" 
                        {% if is_required %}required{% endif %}
                        {% if field.annotation | field_types == 'date' %}
                        value="{{ item[field_name].strftime('%Y-%m-%d') if item and item[field_name] else '' }}"
                        {% elif field.annotation | field_types == 'checkbox' %}
                        {% if item and item[field_name] %}checked{% endif %}
                        {% else %}
                        value="{{ item[field_name] if item else '' }}"
                        {% endif %}>
                {% endif %}
            </div>
        {% endif %}
    {% endfor %}
    {% if item %}
    <input type="hidden" name="id" value="{{ item.id }}">
    {% endif %}
    <button type="submit" class="btn-submit">{{ submit_text if submit_text else 'Add' }}</button>
</form>

{% block content %}
{% endblock %}

<script>
// Function to add a list field input
function addListField(containerId, fieldName) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container with id "${containerId}" not found`);
        return;
    }
    
    const inputGroup = document.createElement('div');
    inputGroup.className = 'input-group mb-2';
    
    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'form-control';
    input.name = `${fieldName}[]`;
    
    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.className = 'btn-list-action btn-remove';
    removeButton.textContent = 'x';
    removeButton.onclick = function() { removeListField(this); };
    
    inputGroup.appendChild(input);
    inputGroup.appendChild(removeButton);
    
    container.appendChild(inputGroup);
    console.log(`New input field added to ${containerId}`);
}

{# function addListRelationshipField(containerId, fieldName) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container with id "${containerId}" not found`);
        return;
    }
    
    const inputGroup = document.createElement('div');
    inputGroup.className = 'input-group mb-2';
    
    const select = document.createElement('select');
    select.className = 'form-control';
    select.name = `${fieldName}[]`;
    
    // Clone options from the first select in the container
    const firstSelect = container.querySelector('select');
    if (firstSelect) {
        firstSelect.querySelectorAll('option').forEach(option => {
            select.appendChild(option.cloneNode(true));
        });
    }
    
    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.className = 'btn-list-action btn-remove';
    removeButton.textContent = 'x';
    removeButton.onclick = function() { removeListField(this); };
    
    inputGroup.appendChild(select);
    inputGroup.appendChild(removeButton);
    
    container.appendChild(inputGroup);
    console.log(`New relationship field added to ${containerId}`);
} #}

// Function to remove a list field input
function removeListField(button) {
    const inputGroup = button.closest('.input-group');
    if (inputGroup) {
        inputGroup.remove();
        console.log('Input field removed');
    } else {
        console.error('Could not find parent input group to remove');
    }
}

{# function addReferredModel(fieldName, modelData) {
    const container = document.getElementById(`${fieldName}-container-Gay1`);
    const select = container.querySelector('select');
    
    if (select) {
        const option = document.createElement('option');
        option.value = modelData.id;
        option.textContent = modelData.name;
        option.selected = true;
        select.appendChild(option);
    } else {
        addListRelationshipField(`-${fieldName}-container-Gay3`, fieldName);
        const newSelect = container.querySelector('select:last-child');
        if (newSelect) {
            const option = document.createElement('option');
            option.value = modelData.id;
            option.textContent = modelData.name;
            option.selected = true;
            newSelect.appendChild(option);
        }
    }

    // Close the referred model modal
    document.getElementById('referredModelModal').style.display = 'none';
} #}

function submitMainForm(form) {
    const formData = new FormData(form);
    console.log('formData: submitting...')
    // Add stored referred models to the form data
    {% for field_name in list_relationships %}
    console.log('checking local storage for: ', '{{ field_name }}_models')
        if ('{{ field_name }}_models' in localStorage) {
            console.log('found fieldname in storage')
            const storedModels = JSON.parse(localStorage.getItem('{{ field_name }}_models') || '[]');
            formData.append('{{ field_name }}_new', JSON.stringify(storedModels));
        }
    {% endfor %}
    
    fetch(form.getAttribute('hx-post') || form.getAttribute('hx-put'), {
        method: form.getAttribute('hx-post') ? 'POST' : 'PUT',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            alert(data.message);
            // Clear stored models after successful submission
            {% for field_name in list_relationships %}
                localStorage.removeItem('{{ field_name }}_models');
            {% endfor %}
            // Refresh the page or update the UI as needed
        } else {
            console.error('Invalid response from server');
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
</script>