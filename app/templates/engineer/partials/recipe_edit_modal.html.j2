<div id="recipeEditModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Edit Recipe</h2>
        <form id="recipeEditForm">
            <input type="hidden" id="editRecipeId" name="recipe_id">
            
            <label for="editName">Name:</label>
            <input type="text" id="editName" name="name" required>
            
            <label for="editDescription">Description:</label>
            <textarea id="editDescription" name="description"></textarea>
            
            <label for="editWorkpiece">Workpiece:</label>
            <select id="editWorkpiece" name="workpiece_id" required>
                <option value="">Select Workpiece</option>
            </select>
            
            <label for="editMachine">Machine:</label>
            <select id="editMachine" name="machine_id" required>
                <option value="">Select Machine</option>
            </select>
            
            <h3>Tool Positions</h3>
            <div id="editToolPositions"></div>
            <button type="button" class="btn-add-new" id="editAddToolPositionBtn">Add Tool Position</button>
            
            <button type="submit" class="btn-submit">Save Changes</button>
        </form>
    </div>
</div>

<div id="editToolPositionModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Edit Tool Position</h2>
        <form id="editToolPositionForm">
            <input type="hidden" id="editToolPositionIndex" value="">
            <label for="editTpName">Name:</label>
            <input type="text" id="editTpName" name="name" required>
            
            <label for="editTool">Tool:</label>
            <select id="editTool" name="tool_id" required>
                <option value="">Select Tool</option>
            </select>
            
            <h3>Tool Attributes</h3>
            <div id="editToolAttributes"></div>
            
            <h3>Tool Life Expectancy</h3>
            <label for="editExpectedLife">Expected Life:</label>
            <input type="number" id="editExpectedLife" name="expected_life" required>
            
            <button type="submit" class="btn-submit">Save</button>
        </form>
    </div>
</div>

<script>
    // Initialize edit modal functionality
    const recipeEditModal = document.getElementById('recipeEditModal');
    const editToolPositionModal = document.getElementById('editToolPositionModal');
    const editAddToolPositionBtn = document.getElementById('editAddToolPositionBtn');
    const recipeEditForm = document.getElementById('recipeEditForm');
    const editToolPositionForm = document.getElementById('editToolPositionForm');
    const editToolPositions = document.getElementById('editToolPositions');

    // Close buttons for edit modals
    recipeEditModal.querySelector('.close').onclick = () => recipeEditModal.classList.remove('active');
    editToolPositionModal.querySelector('.close').onclick = () => editToolPositionModal.classList.remove('active');

    // Add tool position button for edit modal
    editAddToolPositionBtn.onclick = () => {
        document.getElementById('editToolPositionIndex').value = '';
        editToolPositionForm.reset();
        document.getElementById('editToolAttributes').innerHTML = '';
        editToolPositionModal.classList.add('active');
    };

    // Store dropdown data
    let dropdownDataLoaded = false;
    let workpiecesData = null;
    let machinesData = null;

    // Function to load dropdown data
    async function loadDropdownData() {
        if (!dropdownDataLoaded) {
            console.log('Loading dropdown data...');
            try {
                // Load workpieces
                const workpiecesResponse = await fetch('/engineer/recipes/workpieces');
                workpiecesData = await workpiecesResponse.json();
                const editWorkpiece = document.getElementById('editWorkpiece');
                editWorkpiece.innerHTML = '<option value="">Select Workpiece</option>';
                workpiecesData.forEach(wp => {
                    const option = document.createElement('option');
                    option.value = wp.id;
                    option.textContent = wp.name;
                    editWorkpiece.appendChild(option);
                });

                // Load machines
                const machinesResponse = await fetch('/engineer/recipes/machines');
                machinesData = await machinesResponse.json();
                const editMachine = document.getElementById('editMachine');
                editMachine.innerHTML = '<option value="">Select Machine</option>';
                machinesData.forEach(m => {
                    const option = document.createElement('option');
                    option.value = m.id;
                    option.textContent = m.name;
                    editMachine.appendChild(option);
                });

                // Load tools
                const toolsResponse = await fetch('/engineer/recipes/tools');
                window.editToolsData = await toolsResponse.json();
                const editTool = document.getElementById('editTool');
                editTool.innerHTML = '<option value="">Select Tool</option>';
                Object.entries(window.editToolsData).forEach(([id, tool]) => {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = tool.name;
                    editTool.appendChild(option);
                });

                window.editToolsDataLoaded = true;
                dropdownDataLoaded = true;
                console.log('Dropdown data loaded successfully');
            } catch (error) {
                console.error('Error loading dropdown data:', error);
                showToast('Error loading form data');
            }
        }
    }

    // Handle tool selection change in edit modal
    document.getElementById('editTool').addEventListener('change', function() {
        const toolId = this.value;
        const tool = window.editToolsData[toolId];
        const toolAttributesDiv = document.getElementById('editToolAttributes');
        toolAttributesDiv.innerHTML = '';

        if (tool && tool.attributes) {
            tool.attributes.forEach(attr => {
                const attrDiv = document.createElement('div');
                attrDiv.innerHTML = `
                    <label for="edit_${attr.name}">${attr.name} (${attr.unit}):</label>
                    <input type="number" step="any" id="edit_${attr.name}" name="${attr.name}" required>
                `;
                toolAttributesDiv.appendChild(attrDiv);
            });
        }
    });

    function editExistingToolPosition(element) {
        const toolPositionDiv = element.closest('.tool-position');
        const name = toolPositionDiv.querySelector('h4').textContent;
        const toolId = toolPositionDiv.querySelector('p[hidden]').textContent.split(':')[1].trim();
        const expectedLife = toolPositionDiv.querySelector('.expected-life').textContent.split(':')[1].trim();

        document.getElementById('editToolPositionIndex').value = Array.from(editToolPositions.children).indexOf(toolPositionDiv);
        document.getElementById('editTpName').value = name;
        document.getElementById('editTool').value = toolId;
        document.getElementById('editExpectedLife').value = expectedLife;

        // Trigger tool change event to populate attributes
        document.getElementById('editTool').dispatchEvent(new Event('change'));

        // Set attribute values
        const attributeParagraphs = toolPositionDiv.querySelectorAll('.tool-attribute');
        attributeParagraphs.forEach(p => {
            const [name, valueWithUnit] = p.textContent.split(':');
            const value = valueWithUnit.trim().split(' ')[0];
            const input = document.querySelector(`#editToolAttributes input[name="${name.trim()}"]`);
            if (input) input.value = value;
        });

        editToolPositionModal.classList.add('active');
    }

    function deleteExistingToolPosition(element) {
        element.closest('.tool-position').remove();
    }

    // Handle adding/editing tool positions in edit modal
    editToolPositionForm.onsubmit = (e) => {
        e.preventDefault();
        const editIndex = document.getElementById('editToolPositionIndex').value;
        const toolPositionDiv = document.createElement('div');
        toolPositionDiv.className = 'tool-position';
        const toolSelect = document.getElementById('editTool');
        const toolName = toolSelect.options[toolSelect.selectedIndex].text;        
        
        let attributesHtml = '';
        const toolAttributes = document.getElementById('editToolAttributes').querySelectorAll('input');
        toolAttributes.forEach(attr => {
            attributesHtml += `<p class="tool-attribute">${attr.name}: ${attr.value} ${attr.previousElementSibling.textContent.match(/\((.*?)\)/)[1]}</p>`;
        });

        toolPositionDiv.innerHTML = `
            <h4>${e.target.name.value}</h4>
            <p hidden>Tool:${toolSelect.value}</p> 
            <p class="tool-name">Tool: ${toolName}</p>
            ${attributesHtml}
            <p class="expected-life">Expected Life: ${e.target.expected_life.value}</p>
            <div class="tool-position-actions">
                <button type="button" onclick="editExistingToolPosition(this)">Edit</button>
                <button type="button" onclick="deleteExistingToolPosition(this)">Delete</button>
            </div>
            <p class="separator">- - - - - - - - - - - - - - - -</p>
        `;

        if (editIndex !== '') {
            editToolPositions.children[editIndex].replaceWith(toolPositionDiv);
        } else {
            editToolPositions.appendChild(toolPositionDiv);
        }

        editToolPositionModal.classList.remove('active');
        editToolPositionForm.reset();
        document.getElementById('editToolAttributes').innerHTML = '';
        document.getElementById('editToolPositionIndex').value = '';
    };

    // Function to populate the edit modal with recipe data
    window.editRecipe = async function(recipeData) {
        console.log('Populating edit modal with data:', recipeData);
        
        // Load dropdown data if not already loaded
        if (!dropdownDataLoaded) {
            await loadDropdownData();
        }

        // Populate basic recipe data
        document.getElementById('editRecipeId').value = recipeData.id;
        document.getElementById('editName').value = recipeData.name;
        document.getElementById('editDescription').value = recipeData.description;
        document.getElementById('editWorkpiece').value = recipeData.workpiece_id;
        document.getElementById('editMachine').value = recipeData.machine_id;
        
        console.log('Basic recipe data populated');
        
        // Clear and populate tool positions
        editToolPositions.innerHTML = '';
        
        recipeData.tool_positions.forEach(tp => {
            console.log('Processing tool position:', tp);
            const toolPositionDiv = document.createElement('div');
            toolPositionDiv.className = 'tool-position';
            
            let attributesHtml = '';
            try {
                if (window.editToolsData[tp.tool_id]) {
                    Object.entries(tp.tool_settings).forEach(([name, value]) => {
                        const attribute = window.editToolsData[tp.tool_id].attributes.find(a => a.name === name);
                        if (attribute) {
                            attributesHtml += `<p class="tool-attribute">${name}: ${value} ${attribute.unit}</p>`;
                        }
                    });
                }
            } catch (error) {
                console.error('Error processing tool attributes:', error);
                attributesHtml = '<p class="error">Error loading tool attributes</p>';
            }

            const toolName = window.editToolsData[tp.tool_id] ? window.editToolsData[tp.tool_id].name : 'Unknown Tool';
            
            toolPositionDiv.innerHTML = `
                <h4>${tp.name}</h4>
                <p hidden>Tool:${tp.tool_id}</p> 
                <p class="tool-name">Tool: ${toolName}</p>
                ${attributesHtml}
                <p class="expected-life">Expected Life: ${tp.expected_life}</p>
                <div class="tool-position-actions">
                    <button type="button" onclick="editExistingToolPosition(this)">Edit</button>
                    <button type="button" onclick="deleteExistingToolPosition(this)">Delete</button>
                </div>
                <p class="separator">- - - - - - - - - - - - - - - -</p>
            `;
            editToolPositions.appendChild(toolPositionDiv);
        });

        console.log('Tool positions populated');
    };

    // Handle recipe edit form submission
    recipeEditForm.onsubmit = async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const recipe = {
            id: parseInt(formData.get('recipe_id')),
            name: formData.get('name'),
            description: formData.get('description'),
            workpiece_id: parseInt(formData.get('workpiece_id')),
            machine_id: parseInt(formData.get('machine_id')),
        };

        const toolPositions = Array.from(document.querySelectorAll('#editToolPositions .tool-position')).map(tp => {
            const toolAttributes = {};
            tp.querySelectorAll('.tool-attribute').forEach(p => {
                const [name, valueWithUnit] = p.textContent.split(':');
                toolAttributes[name.trim()] = parseFloat(valueWithUnit.trim().split(' ')[0]);
            });
            return {
                name: tp.querySelector('h4').textContent,
                tool_id: tp.querySelector('p[hidden]').textContent.split(':')[1].trim(),
                tool_settings: toolAttributes,
                expected_life: parseInt(tp.querySelector('.expected-life').textContent.split(':')[1].trim()),
            };
        });

        try {
            const response = await fetch(`/engineer/recipes/${recipe.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    recipe,
                    tool_positions: toolPositions,
                }),
            });
            const result = await response.json();
            if (response.ok) {
                showToast('Recipe updated successfully!');
                recipeEditModal.classList.remove('active');
                // Trigger a custom event to refresh the list
                document.body.dispatchEvent(new Event('Edited'));
            } else {
                showToast('Error updating recipe: ' + result.detail);
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('An error occurred while updating the recipe.');
        }
    };
</script>

<style>
.tool-position {
    margin: 15px 0;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.tool-position-actions {
    margin: 10px 0;
}

.tool-position-actions button {
    margin-right: 10px;
    padding: 5px 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.tool-position-actions button:first-child {
    background-color: #4CAF50;
    color: white;
}

.tool-position-actions button:last-child {
    background-color: #f44336;
    color: white;
}

.separator {
    color: #ddd;
    margin: 10px 0;
}

.error {
    color: #f44336;
    font-style: italic;
}

.modal.active {
    display: block;
}
</style>
