{% extends "dashboard/base.html.j2" %}
{% block title %}Data Upload{% endblock %}

{% block content %}
<div class="container bg-slate-900 mx-auto px-4 py-8">  
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- Tool Consumption Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Tool Consumption Data</h2>
      <p class="text-gray-200 mb-4">Upload Excel/CSV files containing tool consumption data.</p>
      <button
        onclick="toggleInstructions('consumption')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="consumptionArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="consumptionInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Tom Schott (Vallen) sends an email one per month with tool issues.</li>
        <li>Download that excel list from there</li>
        <li>And then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('tool-consumption', 'Tool Consumption Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Tool Consumption
      </button>
    </div>

    <!-- Parts Produced Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Parts Production Data</h2>
      <p class="text-gray-200 mb-4">Upload Excel file containing parts production data.</p>
      <button
        onclick="toggleInstructions('production')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="productionArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="productionInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Open SAP</li>
        <li>Go to transaction # MB51</li>
        <li>Click 'get variant' (Shift + F5)</li>
        <li>Enter 'CMB51' in the 'variant' field and 'JJEFFERS' in the 'created by' field</li>
        <li>Execute popup</li>
        <li>Select the date range (don't worry, duplicates will be skipped)</li>
        <li>Execute MB51 main screen</li>
        <li>Right click anywhere in the data to export to spreadsheet</li>
        <li>And then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('parts-produced', 'Parts Production Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Parts Production
      </button>
    </div>

    <!-- Tool Orders Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Tool Orders</h2>
      <p class="text-gray-200 mb-4">Upload csv file containing Tool Orders.</p>
      <button
        onclick="toggleInstructions('order')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="orderArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="orderInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Ask Tom Schott from Vallen for the received PO excel list</li>
        <li>And then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('tool-orders', 'Tool Orders Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Tool Orders
      </button>
    </div>

    <!-- Order Delivery Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Order Deliveries</h2>
      <p class="text-gray-200 mb-4">Upload csv file containing Tool Order Deliveries.</p>
      <button
        onclick="toggleInstructions('delivery')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="deliveryArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="deliveryInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Ask Tom Schott from Vallen for the received PO excel list</li>
        <li>And then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('tool-delivery', 'Tool Order Delivery Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Tool Order Deliveries
      </button>
    </div>

    <!-- Tool Inventory Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Tool Inventory</h2>
      <p class="text-gray-200 mb-4">Upload csv file containing Tool Inventory.</p>
      <button
        onclick="toggleInstructions('inventory')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="inventoryArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="inventoryInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Ask Tom Schott from Vallen for the CC excel list</li>
        <li>And then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('tool-inventory', 'Tool Inventory Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Tool Inventory
      </button>
    </div>

    <!-- Hourly Production Upload Button -->
    <div class="p-6 bg-slate-800 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-3">Hourly Production</h2>
      <p class="text-gray-200 mb-4">Upload excel file containing hourly Production Data.</p>
      <button
        onclick="toggleInstructions('hourlyProduction')"
        class="text-gray-200 hover:text-teal-500 mb-2 flex items-center"
      >
        <span id="hourlyProductionArrow" class="mr-2">▶</span>
        Where do I get the data?
      </button>
      <ul id="hourlyProductionInstructions" class="list-disc list-inside text-gray-200 mb-4 hidden">
        <li>Theres a Teams group called IFNA OPS CORE TEAMS</li>
        <li>Shamarcus Simmons can add you</li>
        <li>in the groups files, theres the HOURLY TRACKER OAS V3</li>
        <li>Download that, and then ...</li>
      </ul>
      <button 
        onclick="openUploadModal('hourlyProduction', 'Hourly Production Data')"
        class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Upload Hourly Production
      </button>
    </div>
  </div>

  <!-- Upload Modal -->
  <div id="uploadModal" class="fixed inset-0 backdrop-blur-sm bg-black/30 hidden flex items-center justify-center z-50">
    <div class="bg-slate-800 p-8 rounded-lg shadow-xl max-h-[90vh] overflow-y-auto w-full max-w-4xl mx-4">
      <div class="flex justify-between items-center mb-4">
        <h2 id="modalTitle" class="text-xl font-bold"></h2>
        <button onclick="closeUploadModal()" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form id="uploadForm" enctype="multipart/form-data">
        <input type="hidden" id="uploadType" name="uploadType">
        <div class="mb-4">
          <label class="block text-sm font-bold mb-2" for="file">
            Select File
          </label>
          <input 
            class="shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline"
            type="file" 
            id="file" 
            name="file"
            accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            required
          >
        </div>

        <div id="sheetSelection" class="hidden mb-4">
          <label class="block text-sm font-bold mb-2">Select Sheets to Process</label>
          <div id="sheetList" class="space-y-2"></div>
        </div>

        <div id="sheetPreview" class="hidden mb-4">
          <label class="block text-sm font-bold mb-2">Sheet Preview</label>
          <label class="block text-sm font-bold mb-2">Select Header Row</label>
          <div class="overflow-x-auto bg-slate-700 rounded-lg p-4 max-h-[50vh]">
            <table id="previewTable" class="min-w-full divide-y divide-slate-600">
              <tbody id="previewBody" class="divide-y divide-slate-600">
              </tbody>
            </table>
          </div>
        </div>
        
        <div class="flex justify-end space-x-4">
          <button 
            type="button"
            onclick="closeUploadModal()"
            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Cancel
          </button>
          <button 
            type="submit"
            id="uploadButton"
            class="bg-teal-700 hover:bg-teal-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Upload
          </button>
        </div>
      </form>

      <div id="message" class="hidden mt-4 p-4 rounded"></div>
    </div>
  </div>
</div>

<script>
  function toggleInstructions(data) {
    console.log(data)
    const instructions = document.getElementById(`${data}Instructions`);
    const arrow = document.getElementById(`${data}Arrow`);
    const button = arrow.parentElement;
    
    if (instructions.classList.contains('hidden')) {
      instructions.classList.remove('hidden');
      arrow.textContent = '▼';
    } else {
      instructions.classList.add('hidden');
      arrow.textContent = '▶';
    }
  }

  function openUploadModal(type, title) {
    document.getElementById('uploadModal').classList.remove('hidden');
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('uploadType').value = type;
    document.getElementById('message').classList.add('hidden');
    document.getElementById('file').value = '';
    document.getElementById('sheetSelection').classList.add('hidden');
    document.getElementById('sheetPreview').classList.add('hidden');
  }

  function closeUploadModal() {
    document.getElementById('uploadModal').classList.add('hidden');
  }

  async function getSheetsAndPreview(file) {
    // Clear any existing sheet selection and preview
    document.getElementById('sheetSelection').classList.add('hidden');
    document.getElementById('sheetPreview').classList.add('hidden');
    document.getElementById('sheetList').innerHTML = '';
    
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('/dashboard/upload/preview-sheets', {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        const sheets = await response.json();
        const sheetList = document.getElementById('sheetList');
        sheetList.innerHTML = '';

        sheets.forEach(sheet => {
          const button = document.createElement('button');
          button.type = 'button';
          button.value = sheet;
          button.id = `sheet-${sheet}`;
          button.className = 'w-full mb-2 py-2 px-4 rounded text-left text-gray-200 bg-slate-700 hover:bg-slate-600 focus:outline-none';
          button.textContent = sheet;
          button.dataset.selected = 'false';

          button.addEventListener('click', async (e) => {
            e.preventDefault();
            const wasSelected = button.dataset.selected === 'true';

            if (!wasSelected) {
              // Deselect all other buttons
              sheetList.querySelectorAll('button').forEach(btn => {
                btn.dataset.selected = 'false';
                btn.className = 'w-full mb-2 py-2 px-4 rounded text-left text-gray-200 bg-slate-700 hover:bg-slate-600 focus:outline-none';
              });

              // Select this button
              button.dataset.selected = 'true';
              button.className = 'w-full mb-2 py-2 px-4 rounded text-left text-white bg-teal-700 hover:bg-teal-600 focus:outline-none cursor-not-allowed';

              // Show preview
              await previewSheet(file, sheet);
            } else {
              // Deselect this button
              button.dataset.selected = 'false';
              button.className = 'w-full mb-2 py-2 px-4 rounded text-left text-gray-200 bg-slate-700 hover:bg-slate-600 focus:outline-none';

              // Hide preview
              document.getElementById('sheetPreview').classList.add('hidden');
            }
          });

          sheetList.appendChild(button);
        });

        document.getElementById('sheetSelection').classList.remove('hidden');
        document.getElementById('uploadButton').classList.remove('cursor-not-allowed');
        document.getElementById('uploadButton').textContent = 'Next';
      }
    } catch (error) {
      console.error('Error getting sheets:', error);
    }
  }

  async function previewSheet(file, sheetName) {
    const uploadType = document.getElementById('uploadType').value;
    if (uploadType === 'hourlyProduction') {
      document.getElementById('sheetPreview').classList.add('hidden');
      return;
    }
    if (!sheetName) {
      console.error('No sheet name provided');
      return;
    }
    
    const formData = new FormData();
    formData.append('file', file);
    formData.append('sheet_name', sheetName.toString());
    
    try {
      // Show loading state
      const previewDiv = document.getElementById('sheetPreview');
      previewDiv.classList.remove('hidden');
      previewDiv.innerHTML = '<div class="text-center py-4 text-gray-200">Loading preview...</div>';
      document.getElementById('uploadButton').classList.add('cursor-not-allowed');
      
      const response = await fetch('/dashboard/upload/preview-sheet', {
        method: 'POST',
        body: formData
      });

      document.getElementById('uploadButton').classList.remove('cursor-not-allowed');
      
      const preview = await response.json();
      if (preview.error) {
        console.error('Preview error:', preview.error);
        previewDiv.innerHTML = `<div class="text-center py-4 text-red-500">${preview.error}</div>`;
      }
      
      // Reset preview div
      previewDiv.innerHTML = `
        <label class="block text-sm font-bold mb-2">Select Header Row</label>
        <div class="overflow-x-auto bg-slate-700 rounded-lg p-4 max-h-[50vh]">
          <table id="previewTable" class="min-w-full divide-y divide-slate-600">
            <tbody id="previewBody" class="divide-y divide-slate-600"></tbody>
          </table>
        </div>
      `;
      
      const body = document.getElementById('previewBody');
      
      // Build rows with radio buttons
      if (!preview.error) {
        preview.rows.forEach((row, rowIndex) => {
          const tr = document.createElement('tr');
          tr.className = 'hover:bg-slate-600';

          // Add radio button cell
          const radioCell = document.createElement('td');
          radioCell.className = 'px-4 py-2 text-sm text-gray-200 whitespace-nowrap';
          const radio = document.createElement('input');
          radio.type = 'radio';
          radio.name = 'headerRow';
          radio.value = rowIndex;
          radio.className = 'mr-2';
          if (rowIndex === 0) {
            radio.checked = true;
          }
          radioCell.appendChild(radio);
          tr.appendChild(radioCell);

          // Add data cells
          row.forEach(cell => {
            const td = document.createElement('td');
            td.className = 'px-4 py-2 text-sm text-gray-200 whitespace-nowrap';
            td.textContent = cell || '';
            tr.appendChild(td);
          });
          body.appendChild(tr);
        });
      }
      
    } catch (error) {
      console.error('Error previewing sheet:', error);
      previewDiv.innerHTML = '<div class="text-center py-4 text-red-500">Error loading preview</div>';
    }
  }

  document.getElementById('uploadForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const fileInput = document.getElementById('file');
    const messageDiv = document.getElementById('message');
    const uploadType = document.getElementById('uploadType').value;
    const sheetSelection = document.getElementById('sheetSelection');
    
    if (fileInput.files.length > 0) {
      const formData = new FormData();
      file = fileInput.files[0]
      formData.append('file', fileInput.files[0]);
      const isCSV = file.name.toLowerCase().endsWith('.csv');
      const isXLSX = file.name.toLowerCase().endsWith('.xlsx') || file.name.toLowerCase().endsWith('.xls');

      // If sheet selection is visible, get selected sheets
      if (!isCSV && !sheetSelection.classList.contains('hidden')) {
        const selectedSheets = Array.from(
          document.querySelectorAll('button[data-selected="true"]')
        ).map(button => button.value);

        if (selectedSheets.length === 0) {
          messageDiv.textContent = 'Please select at least one sheet to process';
          messageDiv.classList.remove('hidden', 'bg-green-100', 'bg-yellow-100');
          messageDiv.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
          return;
        }

        console.log(uploadType)
        if (uploadType != 'hourlyProduction') {
          const selectedRadio = document.querySelector('input[name="headerRow"]:checked');
          if (!selectedRadio) {
            messageDiv.textContent = 'Please select a header row';
            messageDiv.classList.remove('hidden', 'bg-green-100', 'bg-yellow-100');
            messageDiv.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
            return;
          }
          formData.append('header_row', selectedRadio.value);
        }

        formData.append('sheet_names', selectedSheets.join(','));
        
        messageDiv.textContent = 'Processing selected sheets...';
      } else if (isXLSX && fileInput.files[0]) {
        // First step - get sheets
        document.getElementById('sheetPreview').classList.add('hidden');  // Hide any existing preview
        await getSheetsAndPreview(fileInput.files[0]);
        return;
      }

      messageDiv.classList.remove('hidden', 'bg-green-100', 'bg-red-100');
      messageDiv.classList.add('bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
      document.getElementById('uploadButton').classList.add('cursor-not-allowed');
      
      try {
        const response = await fetch(`/dashboard/upload/${uploadType}`, {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          document.getElementById('uploadButton').classList.remove('cursor-not-allowed');
          const data = await response.json();
          const stats = data.result;
          messageDiv.textContent = `File "${data.filename}" uploaded successfully! Processed ${stats.total_records} records (${stats.inserted} inserted, ${stats.skipped} duplicates skipped, ${stats.bad_data} rejected due to invalid data)`;
          messageDiv.classList.remove('bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
          messageDiv.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
        } else {
          throw new Error('Upload failed');
        }
      } catch (error) {
        messageDiv.textContent = 'Upload failed. Please try again.';
        messageDiv.classList.remove('bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
        messageDiv.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
      }
    }
  });

  // Close modal when clicking outside
  document.getElementById('uploadModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeUploadModal();
    }
  });
</script>
{% endblock %}
