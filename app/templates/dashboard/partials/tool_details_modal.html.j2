<div id="toolDetailsModal" class="fixed inset-0 bg-gray-900/95 hidden z-[9999] overflow-y-auto">
    <div class="min-h-screen p-4" id="modalBackdrop">
        <div class="flex items-center justify-center">
            <div class="relative w-full max-w-7xl mx-auto bg-gray-800 rounded-lg shadow-xl max-h-[90vh] flex flex-col" id="modalContent">
                <!-- Modal header -->
                <div class="flex justify-between items-center p-4 border-b border-gray-700">
                    <h2 class="text-2xl font-bold" id="modalTitle">Tool Details</h2>
                    <button onclick="closeToolModal()" class="text-gray-400 hover:text-white">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <!-- Modal content -->
                <div class="p-4 overflow-y-auto flex-grow">
                    <div id="modalGrid" class="grid grid-cols-12 auto-rows-[minmax(200px,auto)]">
                        <!-- Content will be dynamically populated -->
                        <div class="col-span-12 flex items-center justify-center text-gray-400">
                            <svg class="animate-spin h-8 w-8 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Loading...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Store active charts
window.modalCharts = {};

// Default chart options
const defaultChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
        y: {
            grid: { color: 'rgba(255, 255, 255, 0.1)' },
            ticks: { color: '#fff' }
        },
        x: {
            grid: { color: 'rgba(255, 255, 255, 0.1)' },
            ticks: { color: '#fff' }
        }
    },
    plugins: {
        legend: { display: true },
        tooltip: {
            titleColor: '#fff',
            bodyColor: '#fff',
            backgroundColor: 'rgba(0, 0, 0, 0.8)'
        }
    }
};

// Function to toggle body scroll
function toggleBodyScroll(lock) {
    if (lock) {
        document.body.classList.add('modal-open');
    } else {
        document.body.classList.remove('modal-open');
    }
}

// Initialize modal
function initModal() {
    const modal = document.getElementById('toolDetailsModal');
    if (!modal) return;

    // Close modal when clicking outside content
    const backdrop = document.getElementById('modalBackdrop');
    backdrop.addEventListener('click', function(e) {
        const modalContent = document.getElementById('modalContent');
        if (!modalContent.contains(e.target)) {
            closeToolModal();
        }
    });

    // Close modal on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeToolModal();
        }
    });
}

// Initialize on script load and DOM content loaded
initModal();
document.addEventListener('DOMContentLoaded', initModal);

// Function to create a card element
function createCard(card) {
    const cardElement = document.createElement('div');
    cardElement.id = card.id;
    cardElement.className = `col-span-${card.width} row-span-${card.height} bg-gray-800 rounded-lg p-4`;
    
    // Add card title
    const titleElement = document.createElement('h3');
    titleElement.className = 'text-lg font-medium mb-4';
    titleElement.textContent = card.title;
    cardElement.appendChild(titleElement);
    
    // Add card content based on type
    const contentElement = document.createElement('div');
    contentElement.className = card.type === 'graph' ? `h-[${card.height * 200}px]` : 'text-sm space-y-2';
    
    if (card.type === 'graph') {
        console.log('card.data', card.data)

        const chart = echarts.init(contentElement);
        chart.setOption(card.data);
        
    } else if (card.type === 'stats') {
        card.data.forEach(stat => {
            const statRow = document.createElement('div');
            statRow.className = 'flex justify-between items-center border-b border-gray-700 pb-2';
            statRow.innerHTML = `
                <span class="text-gray-400">${stat.label}:</span>
                <span class="font-medium">${stat.value}</span>
            `;
            contentElement.appendChild(statRow);
        });
        cardElement.appendChild(contentElement);
    }
    
    return cardElement;
}

// Function to reset modal content
function resetModalContent() {
    const modalGrid = document.getElementById('modalGrid');
    modalGrid.innerHTML = `
        <div class="col-span-12 flex items-center justify-center text-gray-400">
            <svg class="animate-spin h-8 w-8 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading...
        </div>
    `;
    
    // Destroy existing charts
    Object.values(modalCharts).forEach(chart => chart.destroy());
    modalCharts = {};
}

// Make openToolModal globally available
window.openToolModal = async function(toolId, dateRange) {
    const modal = document.getElementById('toolDetailsModal');
    if (!modal) {
        console.error('Modal element not found in openToolModal');
        return;
    }
    
    // Reset content before showing modal
    resetModalContent();
    
    // Show modal
    modal.style.removeProperty('display');
    modal.classList.remove('hidden');
    toggleBodyScroll(true);
    
    // Extract numeric ID from the tool_X format
    const numericId = toolId.split('_')[1];
    
    try {
        // Build URL with date range parameters
        const params = new URLSearchParams({
            start_date: dateRange.startDate || '',
            end_date: dateRange.endDate || ''
        });
        const response = await fetch(`/dashboard/api/tool/${numericId}/details?${params}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const details = await response.json();
        
        // Update modal title
        document.getElementById('modalTitle').textContent = details.title;
        
        // Get modal content container
        const modalGrid = document.getElementById('modalGrid');
        modalGrid.innerHTML = ''; // Clear loading state
        
        // Create and append each card
        details.cards.forEach(card => {
            const cardElement = createCard(card);
            modalGrid.appendChild(cardElement);
        });
        
    } catch (error) {
        console.error('Error fetching tool details:', error);
        
        // Show error message
        const modalGrid = document.getElementById('modalGrid');
        modalGrid.innerHTML = `
            <div class="col-span-12 flex items-center justify-center text-red-400">
                <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Error loading data
            </div>
        `;
    }
};

function closeToolModal() {
    console.log('Closing modal...');
    const modal = document.getElementById('toolDetailsModal');
    if (modal) {
        modal.classList.add('hidden');
        toggleBodyScroll(false);
        // Wait for transition to complete before resetting content
        setTimeout(() => {
            modal.style.display = 'none';
            resetModalContent();
        }, 150);
    } else {
        console.error('Modal element not found in closeToolModal');
    }
}

// Make closeToolModal globally available
window.closeToolModal = closeToolModal;
</script>

<style>
    /* Chart canvas sizing */
    canvas {
        width: 100% !important;
        height: 100% !important;
    }
    
    /* Modal visibility control */
    #toolDetailsModal {
        visibility: hidden;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.15s ease-out, visibility 0.15s ease-out;
        backdrop-filter: blur(4px);
    }
    
    #toolDetailsModal:not(.hidden) {
        visibility: visible;
        opacity: 1;
        pointer-events: auto;
    }

    #toolDetailsModal > div {
        transition: transform 0.15s ease-out;
        transform: scale(0.95);
    }

    #toolDetailsModal:not(.hidden) > div {
        transform: scale(1);
    }

    /* Ensure modal content is always on top */
    #toolDetailsModal .relative {
        z-index: 9999;
    }

    /* Modal content scrolling */
    #toolDetailsModal .overflow-y-auto {
        -webkit-overflow-scrolling: touch;
    }

    /* Prevent body scrolling when modal is open */
    body.modal-open {
        overflow: hidden;
    }
</style>
