<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', path='favicon.ico') }}">
    <title>Tool Life Monitoring</title>
    <link href="{{ url_for('static', path='css/style.css') }}" rel="stylesheet">
</head>
<body class="bg-gray-900 text-gray-100">
    {% include 'partials/tool_details_modal.html.j2' %}
    <div class="min-h-screen p-4">
        {# <div class="max-w-7xl mx-auto"> #}
        <div>
            <!-- Fixed legend at top -->
            <div class="bg-gray-800 p-4 rounded-lg shadow mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h1 class="text-2xl font-bold">Tool Life Monitoring</h1>
                    <div class="text-gray-400">
                        <span class="font-medium">Server:</span> {{ server_address }}
                    </div>
                </div>
                <div class="flex items-center space-x-8 text-sm font-mono">
                    <div class="flex items-center">
                        <div class="w-8 h-4 mr-2 border-2 border-[rgb(75,192,192)] bg-[rgb(75,192,192)]/50"></div>
                        <span>Tool Life</span>
                    </div>
                    
                    <div class="flex items-center">
                        <div class="w-8 h-4 mr-2 border-t-2 border-dashed border-[rgb(255,99,132)]"></div>
                        <span>Trendline</span>
                    </div>
                    
                    <div class="flex items-center">
                        <div class="w-8 h-4 mr-2 border-t-2 border-dashed border-[rgb(255,206,86)]"></div>
                        <span>Mean</span>
                    </div>
                    
                    <div class="flex items-center">
                        <div class="w-8 h-4 mr-2 border-2 border-[rgb(255,206,86)] bg-[rgb(255,206,86)]/10"></div>
                        <span>Mean ± Std Dev</span>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-4">
                {% for graph in graphs %}
                <div class="bg-gray-800 rounded-lg shadow p-4 cursor-pointer hover:bg-gray-700 transition-colors" 
                     onclick="(function(e) {
                         e.preventDefault();
                         e.stopPropagation();
                         const graphId = '{{ graph.id }}';
                         console.log('Graph clicked:', graphId);
                         const graphDiv = document.getElementById(graphId);
                         if (graphDiv && window.graphs[graphId]) {
                             openToolModal(graphId);
                         } else {
                             console.error('Graph element or data not found:', graphId);
                         }
                     })(event)">
                    <h3 class="text-lg font-medium text-gray-300 mb-2">{{ graph.title }}</h3>
                    <div class="flex">
                        <div class="flex-1 -mr-16">
                            {% with graph_id=graph.id, graph_type=graph.type %}
                                {% include 'partials/graph.html.j2' %}
                            {% endwith %}
                        </div>
                        <div class="text-sm font-mono text-gray-400 whitespace-nowrap pl-20 w-44" id="stats_{{ graph.id }}">
                            <div>Slope: --</div>
                            <div>Mean: --</div>
                            <div>σ: ±--</div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>

            {% if not graphs %}
            <div class="text-center py-12">
                <p class="text-gray-400 text-lg">No tool life data available. Add tools and record tool life measurements to see graphs.</p>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Connection status indicator -->
    <div id="connection-status" class="fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500/100">
        Connecting...
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Make graphs object globally available
        window.graphs = {};
        const statusDiv = document.getElementById('connection-status');
        let ws = null;

        // Make initializeGraph function globally available
        window.initializeGraph = function(containerId, type) {
            const canvas = document.querySelector(`#${containerId} canvas`);
            const ctx = canvas.getContext('2d');
            
            window.graphs[containerId] = new Chart(ctx, {
                type: type,
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'Tool Life',
                            data: [],
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                            tension: 0.1,
                            fill: true
                        },
                        {
                            label: 'Trendline',
                            data: [],
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            fill: false,
                            pointRadius: 0
                        },
                        {
                            label: 'Mean',
                            data: [],
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 2,
                            borderDash: [2, 2],
                            fill: false,
                            pointRadius: 0
                        },
                        {
                            label: 'Mean ± Std Dev',
                            data: [],
                            borderColor: 'rgba(255, 206, 86, 0.3)',
                            backgroundColor: 'rgba(255, 206, 86, 0.1)',
                            fill: 1,
                            pointRadius: 0
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: false,
                                text: 'Reached Life',
                                color: '#fff'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        },
                        x: {
                            title: {
                                display: false,
                                text: 'Time',
                                color: '#fff'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const datasetLabel = context.dataset.label;
                                    const value = context.parsed.y;
                                    if (datasetLabel === 'Tool Life') {
                                        return `Life: ${value.toFixed(1)}`;
                                    } else if (datasetLabel === 'Mean') {
                                        return `Mean: ${value.toFixed(1)}`;
                                    } else if (datasetLabel === 'Trendline') {
                                        return `Trend: ${value.toFixed(1)}`;
                                    }
                                    return `${datasetLabel}: ${value.toFixed(1)}`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const ws = new WebSocket(`${protocol}//${window.location.host}/ws/graphs`);
            
            ws.onopen = function() {
                statusDiv.className = 'hidden';
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                
                // Update each graph with its new data
                Object.entries(data).forEach(([graphId, graphData]) => {
                    const graph = graphs[graphId];
                    if (graph) {
                        graph.data.labels = graphData.labels;
                        // Tool life data
                        graph.data.datasets[0].data = graphData.values;
                        // Trendline
                        graph.data.datasets[1].data = graphData.trendline;
                        // Mean line
                        const meanArray = Array(graphData.labels.length).fill(graphData.mean);
                        graph.data.datasets[2].data = meanArray;
                        // Standard deviation band
                        graph.data.datasets[3].data = Array(graphData.labels.length).fill(graphData.mean + graphData.std);
                        graph.data.datasets[3].data2 = Array(graphData.labels.length).fill(graphData.mean - graphData.std);
                        
                        // Update stats display
                        const statsDiv = document.getElementById(`stats_${graphId}`);
                        if (statsDiv) {
                            const slope = (graphData.trendline[graphData.trendline.length - 1] - graphData.trendline[0]) / graphData.trendline.length;
                            statsDiv.innerHTML = `
                                <div>Slope: ${slope.toFixed(2)}</div>
                                <div>Mean: ${graphData.mean.toFixed(2)}</div>
                                <div>σ: ±${graphData.std.toFixed(2)}</div>
                            `;
                        }
                        
                        graph.update();
                    }
                });
            };

            ws.onclose = function() {
                statusDiv.textContent = 'Reconnecting...';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500/100';
                // Attempt to reconnect after 5 seconds
                setTimeout(connectWebSocket, 5000);
            };

            ws.onerror = function() {
                statusDiv.textContent = 'Connection Error';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-red-500/100';
            };

            return ws
        }

        // Initialize all graphs once DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.graph-container').forEach(container => {
                const id = container.id;
                const type = container.dataset.type;
                initializeGraph(id, type);
            });
        });

        // Start WebSocket connection
        connectWebSocket();

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (ws) {
                ws.close();
            }
        });
    </script>

    <style>
        .graph-container {
            height: 200px;
        }
    </style>
</body>
</html>
