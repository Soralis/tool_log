<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', path='favicon.ico') }}">
    <title>Tool Life Monitoring</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-gray-100">
    <div class="min-h-screen p-4">
        {# <div class="max-w-7xl mx-auto"> #}
        <div>
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold">Tool Life Monitoring</h1>
                <div class="text-gray-400">
                    <span class="font-medium">Server:</span> {{ server_address }}
                </div>
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                {% for graph in graphs %}
                <div class="bg-gray-800 rounded-lg shadow p-4">
                    <h3 class="text-lg font-medium mb-2 text-gray-300">{{ graph.title }}</h3>
                    {% with graph_id=graph.id, graph_type=graph.type %}
                        {% include 'partials/graph.html.j2' %}
                    {% endwith %}
                </div>
                {% endfor %}
            </div>

            {% if not graphs %}
            <div class="text-center py-12">
                <p class="text-gray-400 text-lg">No tool life data available. Add tools and record tool life measurements to see graphs.</p>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Connection status indicator -->
    <div id="connection-status" class="fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500">
        Connecting...
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const graphs = {};
        const statusDiv = document.getElementById('connection-status');
        let ws = null;

        function initializeGraph(containerId, type) {
            const canvas = document.querySelector(`#${containerId} canvas`);
            const ctx = canvas.getContext('2d');
            
            graphs[containerId] = new Chart(ctx, {
                type: type,
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'Tool Life',
                            data: [],
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                            tension: 0.1,
                            fill: true
                        },
                        {
                            label: 'Trendline',
                            data: [],
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            fill: false,
                            pointRadius: 0
                        },
                        {
                            label: 'Mean',
                            data: [],
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 2,
                            borderDash: [2, 2],
                            fill: false,
                            pointRadius: 0
                        },
                        {
                            label: 'Mean ± Std Dev',
                            data: [],
                            borderColor: 'rgba(255, 206, 86, 0.3)',
                            backgroundColor: 'rgba(255, 206, 86, 0.1)',
                            fill: 1,
                            pointRadius: 0
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: false,
                                text: 'Reached Life',
                                color: '#fff'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        },
                        x: {
                            title: {
                                display: false,
                                text: 'Time',
                                color: '#fff'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#fff'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                color: '#fff',
                                boxWidth: 12,
                                padding: 15,
                                font: {
                                    family: 'monospace',
                                    size: 11
                                },
                                generateLabels: function(chart) {
                                    const defaultLabels = Chart.defaults.plugins.legend.labels.generateLabels(chart);
                                    const stats = chart.stats || {};
                                    
                                    // Add stats text under each legend item
                                    defaultLabels.forEach(label => {
                                        if (label.text === 'Trendline' && stats.slope !== undefined) {
                                            label.text = `Trendline Slope: ${stats.slope.toFixed(2)} (${(stats.slope / stats.mean * 100).toFixed(1)}%)`;
                                        } else if (label.text === 'Mean' && stats.mean !== undefined) {
                                            label.text = `Mean: ${stats.mean.toFixed(2)}`;
                                        } else if (label.text === 'Mean ± Std Dev' && stats.std !== undefined) {
                                            label.text = `Std Dev: ±${stats.std.toFixed(2)} (±${(stats.std / stats.mean * 100).toFixed(1)}%)`;
                                        }
                                    });
                                    
                                    return defaultLabels;
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const datasetLabel = context.dataset.label;
                                    const value = context.parsed.y;
                                    if (datasetLabel === 'Tool Life') {
                                        return `Life: ${value.toFixed(1)}`;
                                    } else if (datasetLabel === 'Mean') {
                                        return `Mean: ${value.toFixed(1)}`;
                                    } else if (datasetLabel === 'Trendline') {
                                        return `Trend: ${value.toFixed(1)}`;
                                    }
                                    return `${datasetLabel}: ${value.toFixed(1)}`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const ws = new WebSocket(`${protocol}//${window.location.host}/ws/graphs`);
            
            ws.onopen = function() {
                statusDiv.className = 'hidden';
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                
                // Update each graph with its new data
                Object.entries(data).forEach(([graphId, graphData]) => {
                    const graph = graphs[graphId];
                    if (graph) {
                        graph.data.labels = graphData.labels;
                        // Tool life data
                        graph.data.datasets[0].data = graphData.values;
                        // Trendline
                        graph.data.datasets[1].data = graphData.trendline;
                        // Mean line
                        const meanArray = Array(graphData.labels.length).fill(graphData.mean);
                        graph.data.datasets[2].data = meanArray;
                        // Standard deviation band
                        graph.data.datasets[3].data = Array(graphData.labels.length).fill(graphData.mean + graphData.std);
                        graph.data.datasets[3].data2 = Array(graphData.labels.length).fill(graphData.mean - graphData.std);
                        
                        // Store stats for legend labels
                        graph.stats = {
                            mean: graphData.mean,
                            std: graphData.std,
                            slope: (graphData.trendline[graphData.trendline.length - 1] - graphData.trendline[0]) / graphData.trendline.length
                        };
                        
                        graph.update();
                    }
                });
            };

            ws.onclose = function() {
                statusDiv.textContent = 'Reconnecting...';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500';
                // Attempt to reconnect after 5 seconds
                setTimeout(connectWebSocket, 5000);
            };

            ws.onerror = function() {
                statusDiv.textContent = 'Connection Error';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-red-500';
            };

            return ws
        }

        // Initialize all graphs on the page
        document.querySelectorAll('.graph-container').forEach(container => {
            const id = container.id;
            const type = container.dataset.type;
            initializeGraph(id, type);
        });

        // Start WebSocket connection
        connectWebSocket();

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (ws) {
                ws.close();
            }
        });
    </script>

    <style>
        .graph-container {
            height: 250px;  /* Increased height to accommodate legend with stats */
        }
    </style>
</body>
</html>
