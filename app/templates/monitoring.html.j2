{% extends "base.html.j2" %}

{% block content %}
<div class="min-h-screen bg-gray-100 p-4">
    <div class="max-w-7xl mx-auto">
        <!-- Metrics Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-white rounded-lg shadow p-4">
                <h3 class="text-sm font-medium text-gray-500">Uptime</h3>
                <p class="text-2xl font-semibold text-gray-900" id="uptime">-</p>
            </div>
            <div class="bg-white rounded-lg shadow p-4">
                <h3 class="text-sm font-medium text-gray-500">Total Requests</h3>
                <p class="text-2xl font-semibold text-gray-900" id="total-requests">-</p>
            </div>
            <div class="bg-white rounded-lg shadow p-4">
                <h3 class="text-sm font-medium text-gray-500">Error Rate</h3>
                <p class="text-2xl font-semibold text-gray-900" id="error-rate">-</p>
            </div>
            <div class="bg-white rounded-lg shadow p-4">
                <h3 class="text-sm font-medium text-gray-500">Avg Response Time</h3>
                <p class="text-2xl font-semibold text-gray-900" id="avg-response-time">-</p>
            </div>
        </div>

        <!-- Request Log -->
        <div class="bg-white rounded-lg shadow">
            <div class="px-4 py-5 border-b border-gray-200">
                <h2 class="text-lg font-medium text-gray-900">Request Log</h2>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Method</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Endpoint</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Response Time</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="request-log">
                        <!-- Request logs will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    function formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        return `${days}d ${hours}h ${minutes}m ${secs}s`;
    }

    function formatTime(isoString) {
        const date = new Date(isoString);
        return date.toLocaleTimeString();
    }

    function updateMetrics(data) {
        document.getElementById('uptime').textContent = formatUptime(data.uptime);
        document.getElementById('total-requests').textContent = data.total_requests;
        document.getElementById('error-rate').textContent = 
            `${(data.total_errors / Math.max(data.total_requests, 1) * 100).toFixed(1)}%`;
        document.getElementById('avg-response-time').textContent = 
            `${data.avg_response_time.toFixed(3)}s`;
    }

    function addRequestLog(data) {
        const tbody = document.getElementById('request-log');
        const row = document.createElement('tr');
        
        const statusColorClass = data.status_code < 400 ? 'text-green-600' : 'text-red-600';
        
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${formatTime(data.timestamp)}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${data.method}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${data.endpoint}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm ${statusColorClass} font-medium">
                ${data.status_code}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${data.response_time.toFixed(3)}s
            </td>
        `;
        
        tbody.insertBefore(row, tbody.firstChild);
        
        // Keep only the last 100 rows
        while (tbody.children.length > 100) {
            tbody.removeChild(tbody.lastChild);
        }
    }

    // WebSocket connection
    const ws = new WebSocket(`ws://${window.location.host}/monitoring/ws`);
    
    ws.onmessage = function(event) {
        const message = JSON.parse(event.data);
        
        if (message.type === 'metrics') {
            updateMetrics(message.data);
        } else if (message.type === 'request') {
            addRequestLog(message.data);
        }
    };

    ws.onclose = function() {
        console.log('WebSocket connection closed');
        // Attempt to reconnect after 5 seconds
        setTimeout(() => {
            window.location.reload();
        }, 5000);
    };
</script>
{% endblock %}
