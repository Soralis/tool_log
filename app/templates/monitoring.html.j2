<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Monitoring Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-gray-100">
    <div class="min-h-screen p-4">
        <div class="max-w-7xl mx-auto">
            <!-- Metrics Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-gray-800 rounded-lg shadow p-4">
                    <h3 class="text-sm font-medium text-gray-400">Uptime</h3>
                    <p class="text-2xl font-semibold text-gray-100" id="uptime">-</p>
                </div>
                <div class="bg-gray-800 rounded-lg shadow p-4">
                    <h3 class="text-sm font-medium text-gray-400">Total Requests</h3>
                    <p class="text-2xl font-semibold text-gray-100" id="total-requests">-</p>
                </div>
                <div class="bg-gray-800 rounded-lg shadow p-4">
                    <h3 class="text-sm font-medium text-gray-400">Error Rate</h3>
                    <p class="text-2xl font-semibold text-gray-100" id="error-rate">-</p>
                </div>
                <div class="bg-gray-800 rounded-lg shadow p-4">
                    <h3 class="text-sm font-medium text-gray-400">Avg Response Time</h3>
                    <p class="text-2xl font-semibold text-gray-100" id="avg-response-time">-</p>
                </div>
            </div>

            <!-- Request Log -->
            <div class="bg-gray-800 rounded-lg shadow">
                <div class="px-4 py-5 border-b border-gray-700">
                    <h2 class="text-lg font-medium text-gray-100">Request Log</h2>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-700">
                        <thead class="bg-gray-700">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Time</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Method</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Endpoint</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Response Time</th>
                            </tr>
                        </thead>
                        <tbody class="bg-gray-800 divide-y divide-gray-700" id="request-log">
                            <!-- Request logs will be inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            return `${days}d ${hours}h ${minutes}m ${secs}s`;
        }

        function formatTime(isoString) {
            const date = new Date(isoString);
            return date.toLocaleTimeString();
        }

        function updateMetrics(data) {
            document.getElementById('uptime').textContent = formatUptime(data.uptime);
            document.getElementById('total-requests').textContent = data.total_requests;
            document.getElementById('error-rate').textContent = 
                `${(data.total_errors / Math.max(data.total_requests, 1) * 100).toFixed(1)}%`;
            document.getElementById('avg-response-time').textContent = 
                `${data.avg_response_time.toFixed(3)}s`;
        }

        function addRequestLog(data) {
            const tbody = document.getElementById('request-log');
            const row = document.createElement('tr');
            
            const statusColorClass = data.status_code < 400 ? 'text-green-400' : 'text-red-400';
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                    ${formatTime(data.timestamp)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-100">
                    ${data.method}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                    ${data.endpoint}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm ${statusColorClass} font-medium">
                    ${data.status_code}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                    ${data.response_time.toFixed(3)}s
                </td>
            `;
            
            tbody.insertBefore(row, tbody.firstChild);
            
            // Keep only the last 100 rows
            while (tbody.children.length > 100) {
                tbody.removeChild(tbody.lastChild);
            }
        }

        // Add connection status indicator
        const statusDiv = document.createElement('div');
        statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500';
        statusDiv.textContent = 'Connecting...';
        document.body.appendChild(statusDiv);

        // WebSocket connection with retry logic
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const ws = new WebSocket(`${protocol}//${window.location.host}/monitoring/ws`);
            
            ws.onopen = function() {
                console.log('WebSocket connected');
                statusDiv.textContent = 'Connected';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-green-500';
            };
            
            ws.onmessage = function(event) {
                const message = JSON.parse(event.data);
                
                if (message.type === 'metrics') {
                    updateMetrics(message.data);
                } else if (message.type === 'request') {
                    addRequestLog(message.data);
                }
            };

            ws.onclose = function() {
                console.log('WebSocket connection closed');
                statusDiv.textContent = 'Reconnecting...';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-yellow-500';
                // Attempt to reconnect after 5 seconds
                setTimeout(connectWebSocket, 5000);
            };

            ws.onerror = function(err) {
                console.error('WebSocket error:', err);
                statusDiv.textContent = 'Connection Error';
                statusDiv.className = 'fixed bottom-4 right-4 px-4 py-2 rounded-full text-white bg-red-500';
            };

            return ws;
        }

        // Start the WebSocket connection
        connectWebSocket();
    </script>
</body>
</html>
