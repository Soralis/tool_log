<!DOCTYPE html>
<html lang="en">
<!-- Previous head content remains the same until the script section -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', path='favicon.ico') }}">
    <title>{% block title %}Digital ToolLog IFA{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', path='css/style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', path='css/virtual-keyboard.css') }}">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.9.2"></script>
    <script src="{{ url_for('static', path='js/recipe_manager.js') }}"></script>
    <script src="{{ url_for('static', path='js/virtual-keyboard.js') }}"></script>
    <script>
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.getElementById('toast-container').appendChild(toast);
            setTimeout(() => {
                toast.classList.add('show');
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        document.getElementById('toast-container').removeChild(toast);
                    }, 300);
                }, type === 'success' ? 3000 : 10000);
            }, 100);
        }

        function openModal(type) {
            console.log(type)
            const modalId = `${type}Modal`;
            console.log('Opening modal:', modalId);
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
                const form = modal.querySelector('form'); 
                if (form) {
                    form.reset();
                }
            }
        }

        async function checkOperatorAuth() {
            try {
                const response = await fetch('/checkOperatorAuth', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include'
                });
                return response.ok;
            } catch (error) {
                showToast(`Error checking operator auth: ${error}`, 'error')
                return false;
            }
        }

        // Function to fetch recipes for both modals
        async function fetchRecipes(machineId, prefix = '') {
            try {
                const response = await fetch(`/operator/change_over/${machineId}`);
                const data = await response.json();
                const recipeSelect = document.getElementById(`${prefix}recipe-select`);
                const recipeForm = document.getElementById(`${prefix}recipe-form`);
                
                if (recipeSelect) {
                    recipeSelect.innerHTML = '<option value="">Select a recipe</option>';
                    data.forEach(recipe => {
                        const option = document.createElement('option');
                        option.value = recipe.id;
                        option.textContent = recipe.name;
                        recipeSelect.appendChild(option);
                    });
                    recipeForm && recipeForm.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Error fetching recipes:', error);
                showToast('Error loading recipes');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded event fired');

            // Check for toast messages
            const toastMessage = localStorage.getItem('showToast');
            if (toastMessage) {
                showToast(toastMessage);
                localStorage.removeItem('showToast');
            }

            // Initialize recipe manager with error handling
            try {
                const editRecipeManager = new RecipeManager({
                    prefix: 'edit',
                    isEdit: true,
                    recipeModalId: 'recipeEditModal',
                    toolPositionModalId: 'editToolPositionModal',
                    recipeFormId: 'recipeEditForm',
                    toolPositionFormId: 'editToolPositionForm'
                });
            } catch (error) {
                console.error('Error initializing RecipeManager:', error);
            }

            // Handle changeover modal
            const machineSelect = document.getElementById('machine-select');
            const recipeSelect = document.getElementById('recipe-select');
            const recipeForm = document.getElementById('recipe-form');
            
            if (machineSelect) {
                const initialMachineId = machineSelect.getAttribute('value') || machineSelect.value;
                if (initialMachineId) {
                    fetchRecipes(initialMachineId);
                }

                machineSelect.addEventListener('change', function() {
                    const machineId = this.value;
                    if (machineId) {
                        fetchRecipes(machineId);
                    } else {
                        recipeForm && recipeForm.classList.add('hidden');
                    }
                });
            }

            // Handle edit recipe modal
            const editMachineSelect = document.getElementById('recipe-edit-machine-select');
            const editRecipeSelect = document.getElementById('recipe-edit-recipe-select');
            const editRecipeForm = document.getElementById('recipe-edit-recipe-form');

            if (editMachineSelect) {
                const initialEditMachineId = editMachineSelect.getAttribute('value') || editMachineSelect.value;
                if (initialEditMachineId) {
                    fetchRecipes(initialEditMachineId, 'recipe-edit-');
                }

                editMachineSelect.addEventListener('change', function() {
                    const machineId = this.value;
                    if (machineId) {
                        fetchRecipes(machineId, 'recipe-edit-');
                    } else {
                        editRecipeForm && editRecipeForm.classList.add('hidden');
                    }
                });
            }

            // Handle recipe selection form submission
            const recipeSelectForm = document.getElementById('recipeSelectForm');
            if (recipeSelectForm) {
                recipeSelectForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const recipeId = editRecipeSelect.value;
                    if (recipeId) {
                        try {
                            const response = await fetch(`/engineer/recipes/${recipeId}`);
                            if (response.ok) {
                                const recipeData = await response.json();
                                editRecipeManager.populateEditForm(recipeData);
                                closeModal('recipeSelectModal');
                                document.getElementById('recipeEditModal').classList.add('active');
                            } else {
                                showToast('Error loading recipe details');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            showToast('An error occurred while loading the recipe');
                        }
                    } else {
                        showToast('Please select a recipe');
                    }
                });
            }

            // Initialize reload button
            const reloadButton = document.querySelector('.reload-button');
            if (reloadButton) {
                reloadButton.addEventListener('click', hardReload);
            }
        });

        function hardReload() {
            location.reload(true);
        }
    </script>

    {% block extra_head %}{% endblock %}
</head>

<!-- Rest of the body content remains the same -->
<body class="body">
    <!-- Previous body content remains unchanged -->
    <div id="toast-container"></div>
    <div id="page-container_x">
        <div class="logout-button">
            <a href="/logout"><button>Logout</button></a>
        </div>
        <div class="reload-button">
            <button>Reload</button>
        </div>
        
        {% block body %}{% endblock %}
    </div>
        
    <div id="virtual-keyboard" class="virtual-keyboard">
        <!-- Previous keyboard content remains unchanged -->
        <div id="full-keyboard">
            <div class="keyboard-row">
                <button class="key">1</button>
                <button class="key">2</button>
                <button class="key">3</button>
                <button class="key">4</button>
                <button class="key">5</button>
                <button class="key">6</button>
                <button class="key">7</button>
                <button class="key">8</button>
                <button class="key">9</button>
                <button class="key">0</button>
            </div>
            <div class="keyboard-row">
                <button class="key">q</button>
                <button class="key">w</button>
                <button class="key">e</button>
                <button class="key">r</button>
                <button class="key">t</button>
                <button class="key">y</button>
                <button class="key">u</button>
                <button class="key">i</button>
                <button class="key">o</button>
                <button class="key">p</button>
            </div>
            <div class="keyboard-row">
                <button class="key">a</button>
                <button class="key">s</button>
                <button class="key">d</button>
                <button class="key">f</button>
                <button class="key">g</button>
                <button class="key">h</button>
                <button class="key">j</button>
                <button class="key">k</button>
                <button class="key">l</button>
            </div>
            <div class="keyboard-row">
                <button class="key">z</button>
                <button class="key">x</button>
                <button class="key">c</button>
                <button class="key">v</button>
                <button class="key">b</button>
                <button class="key">n</button>
                <button class="key">m</button>
                <button class="key special-key" id="backspace">⌫</button>
            </div>
            <div class="keyboard-row">
                <button class="key special-key" id="space">Space</button>
                <button class="key special-key" id="close">Close</button>
            </div>
        </div>

        <div id="numpad" style="display: none;">
            <div class="keyboard-row">
                <button class="key">7</button>
                <button class="key">8</button>
                <button class="key">9</button>
            </div>
            <div class="keyboard-row">
                <button class="key">4</button>
                <button class="key">5</button>
                <button class="key">6</button>
            </div>
            <div class="keyboard-row">
                <button class="key">1</button>
                <button class="key">2</button>
                <button class="key">3</button>
            </div>
            <div class="keyboard-row">
                <button class="key">0</button>
                <button class="key">.</button>
                <button class="key special-key" id="backspace">⌫</button>
            </div>
            <div class="keyboard-row">
                <button class="key special-key" id="close">Exit</button>
            </div>
        </div>
    </div>
    
    <style>
        .virtual-keyboard {
            position: fixed;
            bottom: -100%;
            z-index: 0;
        }
        @media (max-width: 501px) {
            .virtual-keyboard {
                position: fixed;
                bottom: -80%;
                left: 0;
                width: 100%;
                background-color: #2a2a2a;
                background: #2a2a2a;
                padding: 10px;
                box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
                transition: transform 0.3s ease-in-out;
                z-index: 9999;
            }

            .virtual-keyboard.active {
                transform: translateY(-3200%);
            }

            #full-keyboard, #numpad {
                position: absolute;
                bottom: 0;
                left: 0;
                padding-top: 5px;
                padding-right: 20px;
                width: 100%;
                background: #2a2a2a;
            }

            .keyboard-row {
                display: flex;
                justify-content: center;
                margin-bottom: 5px;
            }

            .key {
                width: 60px;
                height: 60px;
                margin: 2px;
                font-size: 35px;
                background-color: #3a3a3a;
                color: #e0e0e0;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .key:active {
                background-color: #4a4a4a;
            }

            .special-key {
                width: auto;
                padding: 0 10px;
            }

            #space {
                width: 200px;
            }

            #close {
                background-color: #e74c3c;
            }

            #numpad {
                display: flex;
                flex-direction: column;
                align-items: center;
                padding-right: 20px;
            }

            #numpad .keyboard-row {
                display: flex;
                justify-content: center;
                margin-bottom: 5px;
            }

            #numpad .key {
                width: 100px;
                height: 100px;
                font-size: 50px;
                margin: 5px;
            }

            #space {
                width: 150px;
            }
        }
    </style>
</body>
</html>
